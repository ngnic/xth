// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "xendit-takehome/github/entities"

	mock "github.com/stretchr/testify/mock"
)

// OrganisationRepository is an autogenerated mock type for the OrganisationRepository type
type OrganisationRepository struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: orgName, username, comment
func (_m *OrganisationRepository) AddComment(orgName string, username string, comment string) error {
	ret := _m.Called(orgName, username, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(orgName, username, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComments provides a mock function with given fields: orgName
func (_m *OrganisationRepository) DeleteComments(orgName string) error {
	ret := _m.Called(orgName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orgName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetComments provides a mock function with given fields: orgName
func (_m *OrganisationRepository) GetComments(orgName string) ([]entities.Comment, error) {
	ret := _m.Called(orgName)

	var r0 []entities.Comment
	if rf, ok := ret.Get(0).(func(string) []entities.Comment); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: orgName
func (_m *OrganisationRepository) GetMembers(orgName string) ([]entities.Member, error) {
	ret := _m.Called(orgName)

	var r0 []entities.Member
	if rf, ok := ret.Get(0).(func(string) []entities.Member); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
